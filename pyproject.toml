[tool.poetry]
name = "fastapi-nextjs-bootstrap"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.104.1"
uvicorn = "^0.24.0.post1"
pydantic = "^2.5.2"
jinja2 = "^3.1.2"

[tool.poetry.group.dev.dependencies]
black = "^23.11.0"
ruff = "^0.1.7"
pre-commit = "^3.5.0"

[tool.black]
include = '\.pyi?$'
line-length = 88
target-version = ["py312"]

[tool.ruff]
select = [
  "E",
  "F",
  "W",   # flake8
  "B",   # flake8-bugbear
  "I",   # isort
  "ARG", # flake8-unused-arguments
  "C4",  # flake8-comprehensions
  "EM",  # flake8-errmsg
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "G",   # flake8-logging-format
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "RET", # flake8-return
  "RUF", # Ruff-specific
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  "EXE", # flake8-executable
  "NPY", # NumPy specific rules
  "PD",  # pandas-vet
]
ignore = [
  "PLR", # Design related pylint codes
]
typing-modules = ["mypackage._compat.typing"]
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
line-length = 88
target-version = "py312"

[tool.ruff.isort]
force-sort-within-sections = true

[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]
"__init__.py" = ["F401"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
